// Function to fetch data from a public API with error handling
// The `async` keyword allowing the use of `await` inside it.
async function fetchData(url) {
    try {
      // The `fetch` function is a modern way to make HTTP requests.
      // `await` pauses execution until the promise from `fetch(url)` resolves.
      const response = await fetch(url); 
  
      // ES6 feature: Template Literals
      // Used to embed the response status dynamically into the error message.
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
  
      // `await` is also used here to wait for the `response.json()` promise to resolve.
      // This converts the response body into a JavaScript object.
      const data = await response.json(); 
  
      // ES6+ feature: Arrow Functions
      // Used here for a concise, modern syntax when passing a function to `console.log`.
      console.log("Data fetched successfully:", data); 
    } catch (error) {
      // `try...catch` is used to handle both synchronous and asynchronous errors.
      // This ensures that any error during `fetch` or `response.json()` is caught and handled.
      console.error("An error occurred:", error.message); 
    }
  }
  
  // Example usage with a public API
  // `const` is an ES6+ feature for declaring block-scoped constants.
  // The `apiURL` value cannot be reassigned, making it a safer choice for constant values.
  const apiURL = "https://jsonplaceholder.typicode.com/posts";
  
  // Calling the asynchronous function
  // Although `fetchData` is asynchronous, we don't need to `await` it here since we are only triggering it.
  fetchData(apiURL);
  